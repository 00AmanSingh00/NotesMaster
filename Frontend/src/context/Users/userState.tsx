import { FC } from "react";
import { useNavigate } from "react-router-dom";
import { toast } from 'react-hot-toast'

import { User, NewUser } from "@srctypes";

import UserContext from "./userContext";

interface UserStateProps {
  children: React.ReactNode
}

const UserState: FC<UserStateProps> = ({ children }) => {
  /* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
  /* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
  // VARIABLES

  const host = import.meta.env.VITE_HOST;
  const navigate = useNavigate();
  // const [alert, setAlert] = useState({
  //   show: false,
  //   type: "",
  //   message: "",
  // });

  /* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
  /* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

  // METHODS

  // const toggleAlert = (recievedmessage, recievedtype) => {
  //   setAlert({
  //     show: true,
  //     message: recievedmessage,
  //     type: recievedtype,
  //   });
  //   setTimeout(() => {
  //     setAlert({
  //       message: "",
  //       type: "",
  //       show: false,
  //     });
  //   }, 4000);
  // };

  /* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
  /* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

  // SIGNUP

  const signUp = async (userData: NewUser) => {
    const response = await fetch(`${host}/api/auth/createuser`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(userData),
    });
    const json = await response.json();
    if (json.success) {
      // localStorage.setItem('token'.json.authToken)
      navigate("/login");
      // toggleAlert(json.message, "success");
      toast.success(json.message)

    } else {
      toast.error(json.message)
      // toggleAlert(json.message, "danger");
    }
  };

  /* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
  /* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

  // LOGIN

  const logIn = async (userData: User) => {
    const response = await fetch(`${host}/api/auth/login`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(userData),
    });
    const json = await response.json();
    if (json.success) {
      // setAuthToken(json.authToken);
      localStorage.setItem("token", json.authToken);
      // toggleAlert(json.message, "success");
      toast.success(json.message)
      navigate("/");
    } else {
      toast.error(json.message)
      // toggleAlert(json.message, "danger");
    }
  };

  /* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
  /* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

  // RETURN

  return (
    <UserContext.Provider value={{ signUp, logIn }}>
      {children}
    </UserContext.Provider>
  );
};

/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

// EXPORT

export default UserState;
